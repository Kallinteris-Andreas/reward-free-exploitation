import numpy as np
import matplotlib.pyplot as plt

RUNS = 50  # Number of statistical runs
FILE_NAME = "figures/CartPole"

steps = np.load('results/CartPole-v1/DQN/run_0/evaluations.npz')['timesteps']

returns_DQN = np.average(np.array([np.load(f'results/CartPole-v1/DQN/run_{run}/evaluations.npz')['results'] for run in range(RUNS)]), axis=2)
returns_DQN_len = np.average(np.array([np.load(f'results/CartPole-v1/DQN/run_{run}/evaluations.npz')['ep_lengths'] for run in range(RUNS)]), axis=2)
returns_A2C = np.average(np.array([np.load(f'results/CartPole-v1/A2C/run_{run}/evaluations.npz')['results'] for run in range(RUNS)]), axis=2)
returns_A2C_len = np.average(np.array([np.load(f'results/CartPole-v1/A2C/run_{run}/evaluations.npz')['ep_lengths'] for run in range(RUNS)]), axis=2)
returns_PPO = np.average(np.array([np.load(f'results/CartPole-v1/PPO/run_{run}/evaluations.npz')['results'] for run in range(RUNS)]), axis=2)
returns_PPO_len = np.average(np.array([np.load(f'results/CartPole-v1/PPO/run_{run}/evaluations.npz')['ep_lengths'] for run in range(RUNS)]), axis=2)
returns_DQN_fix = np.average(np.array([np.load(f'results/CartPole-v1-fixed/DQN/run_{run}/evaluations.npz')['results'] for run in range(RUNS)]), axis=2)
returns_DQN_fix_len = np.average(np.array([np.load(f'results/CartPole-v1-fixed/DQN/run_{run}/evaluations.npz')['ep_lengths'] for run in range(RUNS)]), axis=2)
returns_A2C_fix = np.average(np.array([np.load(f'results/CartPole-v1-fixed/A2C/run_{run}/evaluations.npz')['results'] for run in range(RUNS)]), axis=2)
returns_A2C_fix_len = np.average(np.array([np.load(f'results/CartPole-v1-fixed/A2C/run_{run}/evaluations.npz')['ep_lengths'] for run in range(RUNS)]), axis=2)
returns_PPO_fix = np.average(np.array([np.load(f'results/CartPole-v1-fixed/PPO/run_{run}/evaluations.npz')['results'] for run in range(RUNS)]), axis=2)
returns_PPO_fix_len = np.average(np.array([np.load(f'results/CartPole-v1-fixed/PPO/run_{run}/evaluations.npz')['ep_lengths'] for run in range(RUNS)]), axis=2)
returns_DQN_sutton = np.average(np.array([np.load(f'results/CartPole-v1_sutton_reward/DQN/run_{run}/evaluations.npz')['results'] for run in range(RUNS)]), axis=2)
returns_DQN_sutton = np.average(np.array([np.load(f'results/CartPole-v1_sutton_reward/DQN/run_{run}/evaluations.npz')['ep_lengths'] for run in range(RUNS)]), axis=2)

returns_PPO = returns_PPO[:, :-1]
returns_PPO_len = returns_PPO_len[:, :-1]
returns_PPO_fix = returns_PPO_fix[:, :-1]
returns_PPO_fix_len = returns_PPO_fix_len[:, :-1]

#breakpoint()

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.plot(steps, np.average(returns_DQN_len, axis=0), "--", label='CartPole-v1 Reward-Free DQN')
ax.fill_between(steps, np.min(returns_DQN_len, axis=0), np.max(returns_DQN_len, axis=0), alpha=0.2)
ax.plot(steps, np.average(returns_DQN_fix_len, axis=0), label='CartPole-v1 DQN')
ax.fill_between(steps, np.min(returns_DQN_fix_len, axis=0), np.max(returns_DQN_fix_len, axis=0), alpha=0.2)
#ax.plot(steps, np.average(returns_DQN_sutton, axis=0), label='CartPole-v1 with sutton-burton reward function')
#ax.fill_between(steps, np.min(returns_DQN_sutton, axis=0), np.max(returns_DQN_sutton, axis=0), alpha=0.2)
ax.plot(steps, np.average(returns_A2C_len, axis=0), "--", label='CartPole-v1 Reward-Free A2C')
ax.fill_between(steps, np.min(returns_A2C_len, axis=0), np.max(returns_A2C_len, axis=0), alpha=0.2)
ax.plot(steps, np.average(returns_A2C_fix_len, axis=0), label='CartPole-v1 A2C')
ax.fill_between(steps, np.min(returns_A2C_fix_len, axis=0), np.max(returns_A2C_fix_len, axis=0), alpha=0.2)
ax.plot(steps, np.average(returns_PPO_len, axis=0), "--", label='CartPole-v1 Reward-Free PPO')
ax.fill_between(steps, np.min(returns_PPO_len, axis=0), np.max(returns_PPO_len, axis=0), alpha=0.2)
ax.plot(steps, np.average(returns_PPO_fix_len, axis=0), label='CartPole-v1 PPO')
ax.fill_between(steps, np.min(returns_PPO_fix_len, axis=0), np.max(returns_PPO_fix_len, axis=0), alpha=0.2)

ax.set_title('SB3 on Gymnasium/CartPole, for ' + str(RUNS) + ' Runs, episodic lenghts')
ax.legend()

fig.set_figwidth(16)
fig.set_figheight(9)

plt.savefig(FILE_NAME + ".eps", bbox_inches="tight")
plt.savefig(FILE_NAME + ".png", bbox_inches="tight")
plt.savefig(FILE_NAME + ".pdf", bbox_inches="tight")
